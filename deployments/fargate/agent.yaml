# This agent config file is designed for use within an ECS task.  The agent
# should be as a Fargate service within an ECS task.
signalFxAccessToken: {"#from": "env:ACCESS_TOKEN"}
ingestUrl: {"#from": "env:INGEST_URL", optional: true}
apiUrl: {"#from": "env:API_URL", optional: true}

intervalSeconds: {"#from": "env:INTERVAL_SECONDS", default: 10}

logging:
  level: {"#from": "env:LOG_LEVEL", default: "info"}

# observers are what discover running services in the environment
observers:
    # Enable the ecs observer to discover other ECS containers running on the
    # same ECS task.
  - type: ecs
    labelsToDimensions: &labelMap
      # We map the cluster label to ClusterName to match what our AWS
      # CloudWatch integration uses.
      com.amazonaws.ecs.container-name: container_spec_name

monitors:
  - type: collectd/cpu
  - type: collectd/cpufreq
  - type: collectd/disk
  - type: collectd/interface
  - type: collectd/load
  - type: collectd/memory
  - type: collectd/protocols
  - type: collectd/signalfx-metadata
  - type: collectd/uptime
  - type: collectd/vmem
  - type: collectd/elasticsearch
    host: localhost
    port: 9200
    username: elastic
    password: SaQaTest
  - type: collectd/zookeeper
    host: localhost
    port: 2181
  - type: collectd/memcached
    host: 127.0.0.1
    port: 11211
  - type: collectd/redis
    host: 127.0.0.1
    port: 6379
  - type: collectd/apache
    host: localhost
    port: 80
  - type: collectd/mysql
    discoveryRule: container_name =~ "mysql" && port == 3306
    username: root
    password: SaQaTest
    databases: [{"name": "mysql", "username": "root", "password": "SaQaTest"}, {"name": "testdb"}]
  - type: collectd/mongodb
    host: localhost
    port: 27017
    databases:
    - admin
  - type: collectd/redis
    host: localhost
    port: 6379
  - type: collectd/rabbitmq
    discoveryRule: container_name =~ "rabbitmq" && port == 15672
    username: guest
    password: guest
    collectChannels: true
    collectConnections: true
    collectExchanges: true
    collectNodes: true
    collectQueues: true
  - type: collectd/postgresql
    host: localhost
    port: 5432
    username: "username1"
    password: "password1"
    queries:
    - name: "exampleQuery"
      minVersion: 60203
      maxVersion: 200203
      statement: |
        SELECT coalesce(sum(n_live_tup), 0) AS live, coalesce(sum(n_dead_tup), 0) AS dead FROM pg_stat_user_tables;
      results:
      - type: gauge
        instancePrefix: live
        valuesFrom:
        - live
    databases:
    - name: test
      username: "test_user"
      password: "test_pwd"
      interval: 5
      expireDelay: 10
      sslMode: disable
    - type: collectd/activemq
      host: localhost
      port: 1099
      serviceURL: service:jmx:rmi:///jndi/rmi://{host}:1099/jmxrmi
      username: testuser
      password: test123
  - type: ecs-metadata
    enableExtraCPUMetrics: true
    enableExtraMemoryMetrics: true
    labelsToDimensions:
      <<: *labelMap

    # You can set this envvar in your task definition to provide extra monitor
    # configuration to monitor applications running as ECS tasks.  You should
    # probably use discovery rules so that you don't have to have a specific
    # config for each EC2 instance.
  - {"#from": "env:EXTRA_MONITOR_CONFIG", default: [], flatten: true}

metricsToExclude:
  - {"#from": "/lib/whitelist.json", flatten: true}
  - {"#from": "env:METRICS_TO_EXCLUDE", default: [], flatten: true}


# This allows any config above to be completely overridden.  CONFIG_OVERRIDE
# must be given as a YAML/JSON object.
_: {"#from": "env:CONFIG_OVERRIDE", optional: true, flatten: true}
